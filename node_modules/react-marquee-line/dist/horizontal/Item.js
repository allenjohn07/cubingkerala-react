"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _helpers = require("./helpers");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; if (obj != null) { var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var Item = function Item(props) {
  var viewBoxClientWidth = props.viewBoxClientWidth,
      gear = props.gear,
      children = props.children,
      itemStyle = props.itemStyle,
      onEnterEnd = props.onEnterEnd,
      onLeaveEnd = props.onLeaveEnd;

  var _useState = (0, _react.useState)(viewBoxClientWidth + 1),
      _useState2 = _slicedToArray(_useState, 2),
      left = _useState2[0],
      setLeft = _useState2[1]; // plus 1 to prevent onEnterStart event being triggered by the very first invoke


  var itemRef = (0, _react.useRef)(null); // for accessing the correspong DOM node and read its layout info

  var frameRef = (0, _react.useRef)(null); // for cleanning rAF purpose

  /* Range of the 4 key thresholds, comment out the 2 currently not in use */
  // const ENTER_START_REF = useRef();
  // const LEAVE_START_REF = useRef();

  var ENTER_END_REF = (0, _react.useRef)();
  var LEAVE_END_REF = (0, _react.useRef)();
  /* Initialize constants */

  var getConstants = (0, _react.useCallback)(function () {
    var node = itemRef.current;
    var nodeOffsetWidth = node.offsetWidth; // ENTER_START_REF.current = getThresholdRange(Math.ceil(clientWidth), gear);
    // LEAVE_START_REF.current = getThresholdRange(0, gear);

    ENTER_END_REF.current = (0, _helpers.getThresholdRange)(Math.ceil(viewBoxClientWidth - nodeOffsetWidth), gear);
    LEAVE_END_REF.current = (0, _helpers.getThresholdRange)(-Math.ceil(nodeOffsetWidth), gear);
  }, [gear, viewBoxClientWidth]);
  (0, _react.useLayoutEffect)(function () {
    getConstants();
  }, [getConstants]);
  /* Translate item by `gear`px per frame automatically */

  var memorizedAutoRun = (0, _react.useCallback)(function () {
    function AutoRun() {
      // filter out stale useEffect's rAF, came up with 2 work arounds: WHY THOES CANNOT BE CLEAN UP PROPERLY
      frameRef.current && cancelAnimationFrame(frameRef.current);
      var node = itemRef.current; // for the whole list being updated, old item is destroyed

      if (!node) return false;
      var translateX = (0, _helpers.getTranslateX)(node.style.transform); // if (isInsideArray(ENTER_START_REF.current, translateX)) {
      //   // console.log('ENTER_START', idx);
      //   onEnterStart && onEnterStart();
      // } else if (isInsideArray(LEAVE_START_REF.current, translateX)) {
      //   // console.log('LEAVE_START', idx);
      //   onLeaveStart && onLeaveStart();
      // } else

      if ((0, _helpers.isInsideArray)(ENTER_END_REF.current, translateX)) {
        onEnterEnd && onEnterEnd();
      } else if ((0, _helpers.isInsideArray)(LEAVE_END_REF.current, translateX)) {
        setLeft(viewBoxClientWidth + 1);
        onLeaveEnd && onLeaveEnd();
        return true;
      }

      setLeft(function (prev) {
        return prev - gear;
      });
      frameRef.current = requestAnimationFrame(memorizedAutoRun);
    }

    AutoRun();
  }, [gear, onEnterEnd, onLeaveEnd, viewBoxClientWidth]);
  /* Start auto run */

  (0, _react.useEffect)(function () {
    frameRef.current = requestAnimationFrame(memorizedAutoRun);
  }, [memorizedAutoRun]);
  return _react.default.createElement("div", {
    className: "react-marquee-line-hor react-marquee-line-hor-item",
    ref: itemRef,
    style: _objectSpread({}, itemStyle, {
      transform: "translate(".concat(left, "px, 0)")
    })
  }, children);
};

var _default = _react.default.memo(Item);

exports.default = _default;