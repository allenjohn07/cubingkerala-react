"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _Item = _interopRequireDefault(require("./Item"));

var _helpers = require("./helpers");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; if (obj != null) { var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var ViewBox = function ViewBox(props) {
  /* Configuration */
  var list = props.list,
      viewBoxStyle = props.viewBoxStyle,
      itemStyle = props.itemStyle,
      gear = props.gear;

  var _useState = (0, _react.useState)(list),
      _useState2 = _slicedToArray(_useState, 2),
      protoArray = _useState2[0],
      setProtoArray = _useState2[1]; // the processed array based on `list` for looping


  var _useState3 = (0, _react.useState)([0]),
      _useState4 = _slicedToArray(_useState3, 2),
      activeArray = _useState4[0],
      setActiveArray = _useState4[1]; // keep the current activated items' idces for perf purpose


  var _useState5 = (0, _react.useState)(null),
      _useState6 = _slicedToArray(_useState5, 2),
      viewBoxClientWidth = _useState6[0],
      setViewBoxClientWidth = _useState6[1];

  var viewBoxRef = (0, _react.useRef)(null);
  /* Get clientWidth of ViewBox */

  (0, _react.useLayoutEffect)(function () {
    setViewBoxClientWidth(viewBoxRef.current.clientWidth);
  }, []);
  /*  Handler of items' onEnterEnd event */

  var memorizedOnItemEnterEnd = (0, _react.useCallback)(function () {
    /* Activate the next item */
    function onItemEnterEnd() {
      var MAX_INDEX = protoArray.length - 1;
      var LAST_INDEX_IN_ACTIVE = (0, _helpers.getLastItem)(activeArray);

      if (LAST_INDEX_IN_ACTIVE < MAX_INDEX) {
        // still got unrun item in sequence
        setActiveArray(activeArray.concat(LAST_INDEX_IN_ACTIVE + 1));
      } else if (LAST_INDEX_IN_ACTIVE === MAX_INDEX) {
        // list[0] is still running when it needs to show up at the original position
        if (activeArray.indexOf(0) > -1) {
          // append one more copy of list to `protoArray`
          setProtoArray(function (prev) {
            return prev.concat(list);
          });
          setActiveArray(activeArray.concat(MAX_INDEX + 1));
        } // list[0] has already dead and good to go back to its original position
        else {
            setActiveArray(activeArray.concat(0));
          }
      }
    }

    onItemEnterEnd();
  }, [activeArray, list, protoArray]);
  /*  Handler of items' onLeaveEnd event */

  var memorizedOnItemLeaveEnd = (0, _react.useCallback)(function () {
    // deactivate item that invisible to the viewbox
    function onItemLeaveEnd() {
      setActiveArray(function (prev) {
        prev.shift();
        return prev;
      });
    }

    onItemLeaveEnd();
  }, []);
  return _react.default.createElement("div", {
    className: "react-marquee-line-hor react-marquee-line-hor-viewBox",
    ref: viewBoxRef,
    style: viewBoxStyle
  }, viewBoxClientWidth && protoArray.map(function (i, idx) {
    // render activated items only
    if (activeArray.indexOf(idx) > -1) {
      return _react.default.createElement(_Item.default, {
        key: idx,
        viewBoxClientWidth: viewBoxClientWidth,
        gear: gear,
        activeArray: activeArray,
        itemStyle: itemStyle,
        onEnterEnd: memorizedOnItemEnterEnd,
        onLeaveEnd: memorizedOnItemLeaveEnd
      }, i);
    } else {
      return null;
    }
  }));
};

var _default = _react.default.memo(ViewBox);

exports.default = _default;