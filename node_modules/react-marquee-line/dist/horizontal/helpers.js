"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getLastItem = getLastItem;
exports.isSameArrays = isSameArrays;
exports.getTranslateX = getTranslateX;
exports.getThresholdRange = getThresholdRange;
exports.isInsideArray = isInsideArray;
exports.syncLineHeightWithHeight = syncLineHeightWithHeight;

function getLastItem(array) {
  if (!Array.isArray(array) || array.length < 1) {
    throw new Error('invalid parameter for getLastItem');
  }

  return array[array.length - 1];
}
/* A VERY simple comparasion, use only in array that owns only primiry-type entries */


function isSameArrays(arr1, arr2) {
  return arr1.join('') === arr2.join('');
}
/* Read the tranlateX value */


function getTranslateX(string) {
  var regExp = /translate\((-?\d+\.?\d*)px, 0px\)/;
  var matches = regExp.exec(string);
  return Number(matches[1]);
}

function getThresholdRange(threshold, gear) {
  var i = 0.5;
  var tmp = [threshold];

  while (gear > i) {
    tmp.push(threshold + i);
    i += 0.5;
  }

  return tmp;
}

function isInsideArray(array, item) {
  return array.indexOf(item) > -1;
}
/* Assign value of viewBox height to its line-height */


function syncLineHeightWithHeight(viewBoxStyle) {
  var height = viewBoxStyle.height;

  if (typeof height === 'undefined') {
    return viewBoxStyle;
  } else {
    var tmp = Object.assign({}, viewBoxStyle);
    tmp.lineHeight = height;
    return tmp;
  }
}