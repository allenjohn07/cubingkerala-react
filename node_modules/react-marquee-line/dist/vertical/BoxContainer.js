"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _ItemBox = _interopRequireDefault(require("./ItemBox"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; if (obj != null) { var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var BoxContainer = function BoxContainer(props) {
  var list = props.list,
      lines = props.lines;

  var _useState = (0, _react.useState)([]),
      _useState2 = _slicedToArray(_useState, 2),
      subList = _useState2[0],
      setSubList = _useState2[1];

  var lastActiveIdx = (0, _react.useRef)(0);
  var updateSubList = (0, _react.useCallback)(function () {
    var listCopied = [].concat(list);
    var MAX_INDEX = listCopied.length - 1;
    var currSubList = null;

    if (lastActiveIdx.current === 0) {
      // initial truncate
      currSubList = listCopied.splice(0, lines);

      if (MAX_INDEX >= lines) {
        lastActiveIdx.current += lines;
      } else {
        lastActiveIdx.current += MAX_INDEX;
      }
    } else {
      currSubList = listCopied.splice(lastActiveIdx.current, lines);

      if (lastActiveIdx.current + lines > MAX_INDEX) {
        lastActiveIdx.current = 0;
      } else {
        lastActiveIdx.current += lines;
      }
    }

    setSubList(currSubList);
  }, [lines, list]);
  (0, _react.useEffect)(function () {
    updateSubList();
  }, [updateSubList]);
  return _react.default.createElement(_ItemBox.default, {
    subList: subList,
    key: lastActiveIdx.current,
    onSlideUpEnd: updateSubList
  });
};

var _default = _react.default.memo(BoxContainer);

exports.default = _default;